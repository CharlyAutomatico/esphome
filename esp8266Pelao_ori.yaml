substitutions:
  device_name: esp8266tmp-pelao
  device_platform: esp8266
  device_board: nodemcuv2
  device_run_duration: 6s
  device_sleep_duration: 294s
  device_deep_sleep: deep_sleep_1

<<: !include common/base.yaml

#LED
status_led:
  pin:
    number: GPIO12

# switch:
#   - platform: gpio
#     pin: GPIO12
#     id: red_pin

# RESTART ESP
button:
  - platform: restart
    name: "Restart button"
    id: restart_button

sensor:
  - platform: dht
    pin: GPIO5
    model: AM2302
    id: "meteor"
    temperature:
      name: "temperatura_test"
      id: tempdht22
      accuracy_decimals: 2
      filters:
        - multiply: 0.92
    humidity:
      name: "Humedad_test"
      id: humdht22
    update_interval: never
  - platform: adc
    pin: VCC
    id: "VCC"
    internal: true
  - platform: template
    name: "esp.2.battery_level"
    unit_of_measurement: "%"
    accuracy_decimals: 2
    update_interval: never

# Deep Sleep configuration entry
deep_sleep:
  run_duration: $device_run_duration
  sleep_duration: $device_sleep_duration
  id: $device_deep_sleep

mqtt:
  broker: !secret mqtt_broker
  discovery_prefix: !secret mqtt_prefijo
  #   username: !secret mqtt_username
  #   password: !secret mqtt_password
  on_message:
    - topic: $device_name/ota_mode
      payload: "ON"
      then:
        - deep_sleep.prevent: $device_deep_sleep
    - topic: $device_name/sleep_mode
      payload: "ON"
      then:
        - deep_sleep.enter: $device_deep_sleep
    - topic: $device_name/restart
      payload: "RESTART"
      then:
        - button.press: restart_button

  on_connect:
    then:
      - delay: 2s
      - logger.log: "Hello World"
      - component.update: "meteor"
      # - lambda: 'id(meteor).update();'
      - mqtt.publish:
          topic: $device_name/time/state
          payload: !lambda |-
            char str[25];
            time_t currTime = id(sntp_time).now().timestamp;
            strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
            return (std::string) str;
      - mqtt.publish:
          topic: $device_name/sensor/esp2battery_level/state
          payload: !lambda |-
            char bif[128];
            sprintf(bif, "%.2f", remap(float(ceil(id(VCC).state * 100) / 100),float(2.8),float(3.63),float(0),float(100)));
            return bif;
          # return esphome::to_string(((id(VCC).state-3) /0.7) * 100.00);
      - logger.log:
          format: "Porcentual = %f"
          args:
            [
              "remap(float(ceil(id(VCC).state * 100) / 100),float(2.8),float(3.63),float(0),float(100))",
            ]
      - mqtt.publish:
          topic: $device_name/sensor/esp2battery_voltaje/state
          payload: !lambda |-
            char buf[128];
            sprintf(buf, "%.2f", ceil(id(VCC).state * 100.0) / 100.0);
            return buf;            
            // return to_string(id(VCC).state);
      - logger.log:
          format: "voltaje = %f V"
          args: ["ceil(id(VCC).state * 100.0) / 100.0"]
