substitutions:
  device_name: esp32-loti
  device_platform: esp32
  device_board: esp32doit-devkit-v1

<<: !include common/base.yaml

# external_components:
#   - source:
#       type: git
#       url: https://github.com/ssieb/custom_components
#     components: [ rfid ]

# RESTART ESP
button:
  - platform: restart
    name: "Restart button"
    id: restart_button

    # LED BLINK
switch:
  - platform: gpio
    pin: GPIO25
    name: "LED"
    id: led

# Sensor Ultrasonic
sensor:
  - platform: ultrasonic
    trigger_pin: GPIO21
    echo_pin: GPIO23
    name: "Distancia gato"
    id: "loti"
    unit_of_measurement: cm
    accuracy_decimals: 1
    update_interval: 5s
    filters:
      - lambda: return (x * 100);
    # on_value_range:
    #   - below: 24
    #     then:
    #       - switch.turn_on: led
    #   - above: 24.1
    #     then:
    #       - switch.turn_off: led
    #       - servo.write:
    #           id: my_servo
    #           level: -100.0%

# Rfid reader
uart:
  rx_pin: GPIO19
  baud_rate: 9600

rdm6300:

binary_sensor:
  - platform: rdm6300
    uid: 3756682
    name: "Tag-Loti"
    on_press:
      then:
        - servo.write:
            id: my_servo
            level: 100.0%
            #de aqui para abajo es nuevo
  - platform: template
    name: "Open-Loti"
    filters:
      - delayed_on: 10s
    lambda: |-
          return id(loti).state > 25;
          // if (id(loti).state > 25) {
          //   return true;
          // } else {
          //   return false;
          // }
    on_press:
      then:
        - switch.turn_off: led
        - servo.write:
            id: my_servo
            # For template values, range is [-1; 1]
            level: !lambda |-
                return -1.0;
    on_release:
      then:
        - switch.turn_on: led
  - platform: gpio
    pin: 
      number: GPIO14
    name: "boton"  
    on_click:
      - min_length: 50ms
        max_length: 499ms
        then:
          - logger.log: "click"
          - servo.write:
              id: my_servo
              level: 100.0%
      - min_length: 500ms
        max_length: 3000ms
        then:
          - logger.log: "clock"
          - servo.write:
              id: my_servo
              level: -100.0%
    # on_double_click:
    #   then:
    #     - logger.log: "clock"
    #     - servo.write:
    #         id: my_servo
    #         level: -100.0%

            
# SERVO Control
servo:
  - id: my_servo
    output: pwm_output
    min_level: 3.0% # 5% at 50Hz is 1mS  (20mS cycles)
    max_level: 11.0% # 10% at 50Hz is 2mS (20mS cycles)
    #transition_length: 5s

# OUTPUT Control
output:
  - platform: ledc
    id: pwm_output
    pin: GPIO27
    frequency: 50 Hz

#MQTT
mqtt:
  broker: !secret mqtt_broker
  discovery_prefix: !secret mqtt_prefijo
  username: !secret mqtt_username
  password: !secret mqtt_password
  on_message:
    - topic: $device_name/button/restart
      payload: "RESTART"
      then:
        - button.press: restart_button
    - topic: $device_name/servo/on
      payload: "SERVON"
      then:
        - servo.write:
            id: my_servo
            level: 100.0%
    - topic: $device_name/servo/off
      payload: "SERVOFF"
      then:
        - servo.write:
            id: my_servo
            level: -100.0%

# interval:
#   - interval: 10s
#     then:
#       - component.update: "loti"
#       - mqtt.publish:
#           topic: $device_name/time/state
#           payload: !lambda |-
#             char str[25];
#             time_t currTime = id(sntp_time).now().timestamp;
#             strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
#             return (std::string) str;
